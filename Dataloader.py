import torchvision
import os
import torch
from Wavelet_Data import Wavelet_Dataset
from torch.utils.data.dataloader import DataLoader

mean = [6.0664571361439674e-06,
6.010808703115183e-06,
7.40455058289243e-06,
4.391912305113142e-06,
2.6752803546497896e-06,
4.423491648660679e-06,
7.562224799839766e-06,
6.727285688893765e-06,
2.353151314004963e-06,
2.3891245899866035e-06,
7.035691324306049e-06,
9.691792674436427e-06,
7.244188875420339e-06,
3.856983338050995e-06,
7.677440390249832e-06,
1.0426038860537323e-05,
1.1171768732314e-05,
8.972661903415612e-06,
9.211068737383304e-06,
1.251976681213265e-05,
4.333306662130434e-06,
1.614921568009877e-05,
1.4467095488907531e-05,
1.3857196978108278e-05,
1.5279064728899518e-05,
1.8631407766249425e-05,
1.7363759189417854e-05,
2.034658455806651e-05,
1.8468500969647652e-05,
2.035047024324837e-05,
1.812202175457621e-05,
6.758817924662644e-06,
4.824053102965032e-06,
4.80795654993034e-06,
6.7642504822274185e-06,
5.8396857160427765e-06,
3.1157897997258884e-06,
3.2228218187827995e-06,
5.435188784835844e-06,
8.502452030863748e-06,
4.658725070226861e-06,
4.920305826894075e-06,
8.576804301567438e-06,
8.528653156929847e-06,
5.252287103217701e-06,
5.296525869856394e-06,
9.190162789212068e-06,
1.2273429074210075e-05,
1.0221983289832042e-05,
8.660590898914153e-06,
1.1029551467294636e-05,
1.3852991834266272e-05,
1.5475784448253534e-05,
1.3413731580698499e-05,
1.3742656064764228e-05,
1.7663677772220133e-05,
2.0643311438577983e-05,
1.9184120300170434e-05,
1.7929279384894472e-05,
1.92425871285486e-05,
2.253315647925061e-05]

dev = [6.428270557741303e-06,
6.293888482320543e-06,
7.73102747839705e-06,
4.403067678562898e-06,
2.8736580210758067e-06,
4.602100041434628e-06,
7.844833297100115e-06,
7.1367923115562454e-06,
2.431655797134811e-06,
2.425534238918182e-06,
7.518180895914617e-06,
1.0560409668778258e-05,
8.413691732635455e-06,
4.528798712544554e-06,
8.901451625759539e-06,
1.1905537865746327e-05,
1.320153989016067e-05,
1.1138914315746545e-05,
1.1362774905866607e-05,
1.5233256466487544e-05,
4.622457779958675e-06,
2.052432848673778e-05,
1.7998905540368208e-05,
1.7444472861964938e-05,
1.8970258898154003e-05,
2.3858763792393232e-05,
2.2503608187213375e-05,
2.7816840715212903e-05,
2.338483855819552e-05,
2.693158392138538e-05,
2.3425645491660018e-05,
7.0035448928509985e-06,
5.064209766333424e-06,
5.026409481191932e-06,
6.971804234777507e-06,
6.189840387115184e-06,
3.244826649705212e-06,
3.4250179492635734e-06,
5.37271952850028e-06,
9.270277328831443e-06,
4.909000173386853e-06,
5.162170116880451e-06,
9.202482013652676e-06,
9.564663936107854e-06,
6.9471192161869116e-06,
6.288326972688844e-06,
1.059370098669732e-05,
1.4455610247721382e-05,
1.2300436349313408e-05,
1.0953044593332168e-05,
1.352126667534748e-05,
1.6963290922124115e-05,
1.953684780855616e-05,
1.6821878849119002e-05,
1.6991448128802906e-05,
2.215182860066361e-05,
2.838119949440774e-05,
2.4842442484770128e-05,
2.255009967119755e-05,
2.408680483078757e-05,
3.04647218707236e-05]

data_transforms = {
    'train': torchvision.transforms.Compose([
        torchvision.transforms.Normalize(mean=mean,std=dev)
    ]),
    'val': torchvision.transforms.Compose([
        torchvision.transforms.Normalize(mean=mean,std=dev)
    ]),
}


def wavelet_collate(batch):
    """
    custom collate function for turning a batch of wavelet data types into 
    (batch_size)x61x32x250 TENSORS
    
    Args:
        Batch: batch of Wavelet Data tensors
    
    Returns:
        tuple: (Wavelet_Dataset(sample(index)), target) where target is class_index of the target class.
    """
    data = torch.stack([item[0] for item in batch])  # just form a tensor
    target = [item[1] for item in batch]
    target = torch.LongTensor(target)
    return [data, target]


def wavelet_dataloader(data_dir, batch_size: int, shuffle=False):
    """
    Custom data loader returns DataLoader of Wavelet_Dataset types
    
    Args:
        root: path to data. ex: "Dataset/1sec_seg_training_class_fif_5000"
        batch_size: batch size
        shuffle: shuffle data
    Returns:
        Dataloader with time Wavelet_Dataset data
    """
    #Lemon_train_dataset = TesseractData(os.path.join(data_dir, 'train'))
    dataset = Wavelet_Dataset(data_dir)

    return DataLoader(dataset=dataset, batch_size = batch_size, collate_fn = wavelet_collate, shuffle=shuffle, num_workers=0, pin_memory=True)






